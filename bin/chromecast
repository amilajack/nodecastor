#!/usr/bin/env node
'use strict';

process.env['AVAHI_COMPAT_NOWARN'] = 1;

var util = require('util'),
    winston = require('winston'),
    _ = require('lodash'),
    nodecastor = require('..'),
    pjson = require('../package.json'),
    ArgumentParser = require('argparse').ArgumentParser,
    parser = new ArgumentParser({
      version: pjson.version,
      description: 'Discover and interact with Google Chromecast devices.'
    });

parser
  .addArgument(['-d', '--debug'], {
    help: 'enable debugging',
    action: 'storeTrue'
  });

var subparsers = parser.addSubparsers({
  dest: 'command'
});

function addHostAndPort(item) {
  item
    .addArgument(['host'], {
      help: 'Chromecast IP address',
      metavar: 'HOST'
    });
  item
    .addArgument(['-p', '--port'], {
      help: 'Chromecast port',
      metavar: 'PORT',
      defaultValue: 8009
    });
}

var subcommands = {

  // discover command
  discover: (function() {
    var discover = subparsers.addParser('discover', {
      help: 'discover Chromecast devices on the network',
      description: 'List and show various information on Google Chromecast present on the network.'
    });

    return function(args) {
      nodecastor.scan({ logger: logger })
        .on('online', function(device) {
          logger.info('+ %s (%s:%d) [%s]',
                      device.friendlyName,
                      device.address, device.port,
                      device.id);
        })
        .on('offline', function(device) {
          logger.info('- %s (%s:%d) [%s]',
                      device.friendlyName,
                      device.address, device.port,
                      device.id);
        })
        .start();
    };
  })(),

  // status command
  status: (function() {
    var status = subparsers.addParser('status', {
      help: 'status of a Chromecast device',
      description: 'get status from a Chromecast device'
    });
    addHostAndPort(status);

    return function(args) {
      var c = getChromecast();
      c.status(function(err, status) {
        if (err) {
          logger.error('Unable to get status:', err.message);
        } else {
          logger.info('Status received:', status);
        }
        c.stop();
      });
    };
  })(),

  // watch command
  watch: (function() {
    var watch = subparsers.addParser('watch', {
      help: 'watch a Chromecast device',
      description: 'watch and display any event hapenning on a Chromecast device'
    });
    addHostAndPort(watch);
    watch.addArgument(['app'], {
      help: 'application ID',
      nargs: '?',
      metavar: 'APPID'
    });

    return function(args) {
      var c = getChromecast();
      if (args.app) {
        c.application(args.app, function(err, app) {
          if (err) {
            logger.error('Unable to get application:', err.message);
            c.stop();
            return;
          }
          app.run(null, function(err, session) {
            if (err) {
              logger.error('Unable to start application:', err.message);
              c.stop();
              return;
            }
            session.on('message', function(message) {
              logger.info('Session message received:', message);
            });
          });
        });
      } else {
        c.status(function(err, status) {
          if (err) {
            logger.error('Unable to query status:', err.message);
            c.stop();
            return;
          }
          c.on('message', function(message) {
            logger.info('Message received:', message);
          });
        });
      }
    };
  })(),

  // Run an app
  run: (function() {
    var run = subparsers.addParser('run', {
      help: 'run an application',
      description: 'run the provided application on a Chromecast device'
    });
    addHostAndPort(run);
    run.addArgument(['app'], {
      help: 'application ID',
      metavar: 'APPID'
    });
    run.addArgument(['--namespace'], {
      help: 'namespace to use when running the application',
      metavar: 'NS'
    });

    return function(args) {
      var c = getChromecast();
      c.application(args.app, function(err, app) {
        if (err) {
          logger.error('Unable to get application:', err.message);
          c.stop();
        } else {
          if (args.namespace) {
            app.run(args.namespace, function(err, session) {
              if (err) {
                logger.error('Unable to start application:', err.message);
              } else {
                session.stop();
              }
              c.stop();
            });
          } else {
            app.run(null);
            c.stop();
          }
        }
      });
    };
  })(),

  // Use hello app
  hello: (function() {
    var hello = subparsers.addParser('hello', {
      help: 'display some arbitrary text',
      description: 'use the HelloText receiver to display some text'
    });
    addHostAndPort(hello);
    hello.addArgument(['text'], {
      help: 'text to display',
      metavar: 'TEXT',
      nargs: '+'
    });

    return function(args) {
      var c = getChromecast();
      var applicationID = '794B7BBF';
      var namespace = 'urn:x-cast:com.google.cast.sample.helloworld';
      c.application(applicationID, function(err, app) {
        if (err) {
          logger.error('Unable to find HelloText application:', err.message);
          c.stop();
        } else {
          app.run(namespace, function(err, session) {
            if (err) {
              logger.error('Unable to start HelloText application:', err.message);
              c.stop();
            } else {
              session.send(args.text.join(' '), function(err, message) {
                if (err) {
                  logger.error('Unable to send hello message:', err.message);
                  c.stop();
                } else {
                  logger.info('Message delivered:', message);
                  setTimeout(function() {
                    c.stop();
                  }, 10000);
                }
              });
            }
          });
        }
      });
    };
  })(),

  // Tic Tac Toe
  tictactoe: (function() {
    var tictactoe = subparsers.addParser('tictactoe', {
      help: 'join a Tic Tac Toe game',
      description: 'join an existing Tic Tac Toe game and play random moves'
    });
    addHostAndPort(tictactoe);

    return function(args) {
      var c = getChromecast(),
          applicationID = 'BFEBD3F1',
          namespace = 'urn:x-cast:com.google.cast.demo.tictactoe',
          board = [],
          player;
      c.application(applicationID, function(err, app) {
        if (err) {
          logger.error('Unable to find TicTacToe application:', err.message);
          c.stop();
          return;
        }
        app.join(namespace, function(err, session) {
          if (err) {
            logger.error('Unable to find a running session:', err.message);
            c.stop();
            return;
          }
          logger.info('Found the game!');

          function play() {
            // Which moves are available?
            var next = _.filter(_.shuffle(_.map(board, function(v, idx) {
              if (v === 0) return idx;
              return null;
            })), null)[0];
            var row = next % 3,
                col = Math.floor(next / 3);
            logger.info('I will move to:', row, col);
            session.send({
              command: 'move',
              row: row,
              column: col
            });
          }

          session.on('message', function(message) {
            switch (message.event) {
            case 'error':
              logger.error('An error occurred:', message.message);
              c.stop();
              break;
            case 'joined':
              // Get the layout
              player = message.player;
              session.send({ command: 'board_layout_request' });
              break;
            case 'board_layout_response':
              board = message.board;
              if (player === 'X') play();
              break;
            case 'moved':
              if (message.game_over) {
                logger.info('Game is over.');
                c.stop();
                break;
              }
              board[message.row + message.column*3] = message.player;
              if (message.player === player) {
                // It's us, do nothing
                break;
              };
              play();
              break;
            }
          });
          session.send({
            command: 'join',
            name: 'nodecastor'
          });
        });
      });
    };
  })(),

  // Run dashkiosk application with a given URL
  dashkiosk: (function() {
    var dashkiosk = subparsers.addParser('dashkiosk', {
      help: 'run Dashkiosk receiver',
      description: 'execute dashkiosk receiver with the given URL'
    });
    addHostAndPort(dashkiosk);
    dashkiosk.addArgument(['url'], {
      help: 'receiver URL',
      metavar: 'URL'
    });

    return function(args) {
      var c = getChromecast(),
          applicationID = '5E7A2C2C',
          namespace = 'urn:x-cast:com.deezer.cast.dashkiosk';
      c.application(applicationID, function(err, app) {
        if (err) {
          logger.error('Unable to find Dashkiosk application:', err.message);
          c.stop();
          return;
        }
        app.run(namespace, function(err, session) {
          if (err) {
            logger.error('Unable to execute Dashkiosk application:', err.message);
            c.stop();
            return;
          }
          session.send({ url: args.url });
        });
      });
    };
  })()
};

var args = parser.parseArgs();

// Logging
var logger = new winston.Logger({
  transports: [
    new winston.transports.Console({
      prettyPrint: true,
      colorize: true,
      silent: false,
      timestamp: false,
      level: args.debug?'debug':'info'
    })
  ]
});

function getChromecast() {
  var c = new nodecastor.CastDevice({ address: args.host,
                                      port: args.port,
                                      logger: logger });
  c
    .once('error', function(err) {
      logger.warn('Error received:', err);
      process.exit(1);
    })
    .once('disconnect', function() {
      logger.warn('Got disconnected from device');
      process.exit(0);
    });
  return c;
}

subcommands[args.command](args);
